import logging
import asyncio
import json
import requests
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import CommandStart
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton,FSInputFile
from aiogram.filters import Command
from docx import Document
import PyPDF2
from matplotlib import pyplot as plt
from io import BytesIO
from PIL import Image, ImageDraw, ImageFont
import random
import os
from dotenv import load_dotenv
from aiogram.client.session.aiohttp import AiohttpSession
import aiohttp


load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")

session = AiohttpSession(timeout=60)

bot = Bot(token=API_TOKEN, session=session)

LLM_URL = "https://api.intelligence.io.solutions/api/v1/chat/completions"
AUTH_TOKEN = os.getenv("AUTH_TOKEN")
logging.basicConfig(level=logging.INFO)

dp = Dispatcher()

user_models = {}
user_tests = {}
user_answers = {}
user_original_texts = {}

@dp.message(CommandStart())
async def cmd_start(message: Message):
    photo_path = "lama.jpeg"
    photo = FSInputFile(photo_path)

    caption = (f"""
–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}! üëã

ü§ñ –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç –ø–æ –ª—é–±–æ–º—É —É—á–µ–±–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É.

üîç –î–ª—è –Ω–∞–∏–ª—É—á—à–µ–≥–æ –ø–æ–Ω–∏–º–∞–Ω–∏—è –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ç–µ–∫—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –º–æ–¥–µ–ª—å LLaMA-4 ‚Äî –æ–Ω–∞ –ø–æ–∫–∞–∑–∞–ª–∞ —Å–µ–±—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ –≤ —Ä–µ—à–µ–Ω–∏–∏ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏.

üìÇ –û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª (.txt, .pdf, .docx), —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!""".strip())
    await message.answer_photo(photo=photo, caption=caption)


@dp.message(F.document)
async def handle_document(message: Message):
    user_id = message.from_user.id
    model = "meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8"

    file = await bot.download(message.document)
    filename = message.document.file_name.lower()

    if filename.endswith(".txt"):
        text = file.read().decode("utf-8", errors="ignore")
    elif filename.endswith(".pdf"):
        reader = PyPDF2.PdfReader(file)
        text = "\n".join(page.extract_text() or "" for page in reader.pages)
    elif filename.endswith(".docx"):
        doc = Document(file)
        text = "\n".join(p.text for p in doc.paragraphs)
    elif message.document.file_size > 10 * 1024 * 1024:  # 10 MB
        await message.answer("‚ö†Ô∏è –§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Ñ–∞–π–ª —Ä–∞–∑–º–µ—Ä–æ–º –¥–æ 10MB.")
        return

    else:
        await message.answer("‚ùå –§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏ .txt, .pdf –∏–ª–∏ .docx")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –∑–∞–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã
    user_original_texts[user_id] = text

    prompt = generate_prompt(text)
    response_text = await make_neuro_request(prompt, model)
    quiz = parse_quiz(response_text)

    if not quiz:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ—Å—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥—Ä—É–≥–æ–π —Ç–µ–∫—Å—Ç –∏–ª–∏ –º–æ–¥–µ–ª—å.")
        return

    user_tests[user_id] = quiz
    await message.answer("üìò –¢–µ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏ /quiz, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –µ–≥–æ.")


@dp.message(F.text & ~F.text.startswith("/"))
async def handle_text(message: Message):
    user_id = message.from_user.id
    text = message.text

    if text.startswith("/"):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –Ω–µ –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤–∞—Ç—å —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏
        return

    model = user_models.get(user_id, "meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8")
    prompt = generate_prompt(text)
    response_text = await make_neuro_request(prompt, model)
    quiz = parse_quiz(response_text)
    if not quiz:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ç–µ—Å—Ç. –í–æ–∑–º–æ–∂–Ω–æ, –º–æ–¥–µ–ª—å –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç.")
        logging.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {response_text}")
        return

    user_tests[user_id] = quiz
    user_original_texts[user_id] = text
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÅ –ó–∞–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data="replace_quiz")]
    ])
    await message.answer("–¢–µ—Å—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω! –ù–∞–ø–∏—à–∏—Ç–µ /quiz, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –µ–≥–æ.")
    await message.answer("–ù–µ —É—Å—Ç—Ä–∞–∏–≤–∞—é—Ç –≤–æ–ø—Ä–æ—Å—ã? –ü–æ–ø—Ä–æ–±—É–π –∑–∞–º–µ–Ω–∏—Ç—å:", reply_markup=keyboard)


@dp.message(Command("quiz"))
async def quiz_handler(message: Message):
    user_id = message.from_user.id
    logging.info(f"[DEBUG] –í—ã–∑–≤–∞–Ω /quiz –æ—Ç {user_id}")

    if user_id not in user_tests:
        logging.warning(f"[DEBUG] –ù–µ—Ç —Ç–µ—Å—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —É—á–µ–±–Ω—ã–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç.")
        return

    user_answers[user_id] = {"current": 0, "score": 0}
    await send_question(message.chat.id, user_id)


@dp.callback_query(lambda c: "|" in c.data)
async def handle_answer(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    if user_id not in user_answers or user_id not in user_tests:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –Ω–∞—á–Ω–∏—Ç–µ —Ç–µ—Å—Ç —Å /quiz", show_alert=True)
        return

    try:
        selected_letter, question_idx = callback.data.split("|")
        question_idx = int(question_idx)
    except Exception:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç", show_alert=True)
        return

    quiz = user_tests[user_id]
    question = quiz[question_idx]
    correct = question["correct"]
    explanation = question.get("explanation", "‚ùî –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")

    is_correct = selected_letter == correct
    if is_correct:
        user_answers[user_id]["score"] += 1
        result = "‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!"
    else:
        result = f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct}) {question['options'][correct]}"

    user_answers[user_id]["current"] += 1

    # –°–æ–±–∏—Ä–∞–µ–º —Ç–µ–∫—Å—Ç —Å –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ–º
    full_text = (
        f"üìò –í–æ–ø—Ä–æ—Å {question_idx + 1}: {question['question']}\n\n"
        f"üìù –í—ã –≤—ã–±—Ä–∞–ª–∏: {selected_letter}) {question['options'].get(selected_letter, '‚Äî')}\n"
        f"{result}\n\n"
        f"üí° –û–±—ä—è—Å–Ω–µ–Ω–∏–µ: {explanation}"
    )

    # –£–¥–∞–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, —á—Ç–æ–±—ã –Ω–µ–ª—å–∑—è –±—ã–ª–æ –æ—Ç–≤–µ—á–∞—Ç—å –ø–æ–≤—Ç–æ—Ä–Ω–æ
    await callback.message.edit_text(full_text, reply_markup=None)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await send_question(callback.message.chat.id, user_id)


@dp.callback_query(lambda c: c.data == "replace_quiz")
async def handle_replace_quiz(callback: types.CallbackQuery):
    user_id = callback.from_user.id

    if user_id not in user_tests:
        await callback.answer("–°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤—å —É—á–µ–±–Ω—ã–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ—Å—Ç.", show_alert=True)
        return

    original_text = user_original_texts.get(user_id)
    if not original_text:
        await callback.answer("–ò—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return

    await callback.message.edit_text("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã...")

    prompt = generate_prompt(original_text)
    model = user_models.get(user_id, "meta-llama/Llama-4-Maverick-17B-128E-Instruct-FP8")
    response_text = await make_neuro_request(prompt, model)
    logging.info(f"–û—Ç–≤–µ—Ç LLM –ø—Ä–∏ –∑–∞–º–µ–Ω–µ –≤–æ–ø—Ä–æ—Å–æ–≤: {response_text[:300]}")

    quiz = parse_quiz(response_text)

    if not quiz:
        await callback.message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç.")
        await callback.answer()
        return

    user_tests[user_id] = quiz
    await callback.message.edit_text("‚úÖ –í–æ–ø—Ä–æ—Å—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /quiz, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –Ω–æ–≤—ã–π —Ç–µ—Å—Ç.")
    await callback.answer()


def generate_prompt(text: str) -> str:
    return f"""
–¢—ã ‚Äî –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å, —Å–æ–∑–¥–∞—é—â–∏–π —Ç–µ—Å—Ç—ã –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–æ–≤.
–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π —É—á–µ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø–æ –Ω–µ–º—É 5 –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞.
–£—Å–ª–æ–≤–∏—è:
- –ö–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—é —Ç–µ–∫—Å—Ç–∞.
- –£ –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞: A, B, C, D.
- –¢–æ–ª—å–∫–æ –æ–¥–∏–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.
- –î–ª—è –∫–∞–∂–¥–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ —É–∫–∞–∂–∏ –∫—Ä–∞—Ç–∫–æ–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞.
–§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
–û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å **—Ç–æ–ª—å–∫–æ** –≤–∞–ª–∏–¥–Ω—ã–º **JSON-–º–∞—Å—Å–∏–≤–æ–º**, –±–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤, –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤, –ø–æ—è—Å–Ω–µ–Ω–∏–π, markdown-–±–ª–æ–∫–æ–≤ –∏–ª–∏ –æ–±—ë—Ä—Ç–æ–∫. **–ù–∏–∫–∞–∫–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–æ –∏–ª–∏ –ø–æ—Å–ª–µ JSON**. –°—Ç—Ä–æ–≥–æ —Å–ª–µ–¥—É–π —ç—Ç–æ–º—É —à–∞–±–ª–æ–Ω—É:

[
  {{
    "question": "—Ç–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞",
    "options": {{
      "A": "—Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ A",
      "B": "—Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ B",
      "C": "—Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ C",
      "D": "—Ç–µ–∫—Å—Ç –≤–∞—Ä–∏–∞–Ω—Ç–∞ D"
    }},
    "correct": "A/B/C/D",
    "explanation": "–ø–æ—è—Å–Ω–µ–Ω–∏–µ –∫ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –æ—Ç–≤–µ—Ç—É"
  }},
  ...
]
–£—á–µ–±–Ω—ã–π —Ç–µ–∫—Å—Ç:
{text}
"""


async def make_neuro_request(prompt: str, model: str) -> str:
    headers = {
        "Authorization": AUTH_TOKEN,
        "Content-Type": "application/json"
    }
    data = {
        "model": model,
        "messages": [{"role": "user", "content": prompt}]
    }

    try:
        response = await asyncio.to_thread(
            lambda: requests.post(LLM_URL, headers=headers, json=data, timeout=60)
        )

        if response.status_code != 200:
            logging.error(f"[LLM ERROR] –°—Ç–∞—Ç—É—Å {response.status_code}: {response.text}")
            return ""

        response_json = response.json()

        if "choices" not in response_json:
            logging.error(f"[LLM ERROR] –ù–µ—Ç –ø–æ–ª—è 'choices'. –û—Ç–≤–µ—Ç: {response_json}")
            return ""

        return response_json["choices"][0]["message"]["content"]

    except Exception as e:
        logging.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ LLM")
        return ""


def parse_quiz(text: str):
    import logging
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–µ—Ä–≤—ã–µ 300 —Å–∏–º–≤–æ–ª–æ–≤): {text[:300]}")

    text = text.strip()

    # –£–±–∏—Ä–∞–µ–º –æ–±—ë—Ä—Ç–∫–∏ ```
    if text.startswith("```") and text.endswith("```"):
        text = text.strip("`").strip()
        if text.lower().startswith("json"):
            text = text[4:].strip()

    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ —Å–∫–æ–±–∫–∏ –æ—Ç LLM
    if text.startswith("(") and text.endswith(")"):
        text = text[1:-1].strip()

    if not text.strip().endswith("]"):
        logging.error("–û—Ç–≤–µ—Ç JSON –æ–±—Ä—ã–≤–∞–µ—Ç—Å—è ‚Äî –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–æ–∫—Ä–∞—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç –∏–ª–∏ —É–≤–µ–ª–∏—á–∏—Ç—å —Ç–∞–π–º–∞—É—Ç.")
        logging.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {text}")
        return None

    try:
        quiz = json.loads(text)
        formatted_quiz = []
        for q in quiz:
            formatted_quiz.append({
                "question": q["question"],
                "options": q["options"],
                "correct": q["correct"].upper(),
                "explanation": q.get("explanation", "‚ùî –û–±—ä—è—Å–Ω–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            })
        return formatted_quiz

    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: {e}")
        logging.error(f"–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON: {text}")
        return None


async def send_question(chat_id: int, user_id: int):
    try:
        quiz = user_tests[user_id]
        state = user_answers.setdefault(user_id, {"current": 0, "score": 0})
        idx = state["current"]

        if idx >= len(quiz):
            score = state["score"]
            result_text = get_result_message(score, len(quiz))
            await bot.send_message(chat_id, result_text.strip())



            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîÅ –ó–∞–º–µ–Ω–∏—Ç—å –≤–æ–ø—Ä–æ—Å—ã", callback_data="replace_quiz")]
            ])
            await bot.send_message(chat_id, "–•–æ—Ç–∏—Ç–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ç–æ–º—É –∂–µ —Ç–µ–∫—Å—Ç—É?",
                                   reply_markup=keyboard)
            await bot.send_message(chat_id, "üìö –•–æ—á–µ—à—å –µ—â—ë –æ–¥–∏–Ω —Ç–µ—Å—Ç? –û—Ç–ø—Ä–∞–≤—å –Ω–æ–≤—ã–π —É—á–µ–±–Ω—ã–π —Ç–µ–∫—Å—Ç –∏–ª–∏ —Ñ–∞–π–ª.")

            user_answers.pop(user_id, None)
            return

        q = quiz[idx]
        options = q["options"]

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏
        text = f"–í–æ–ø—Ä–æ—Å {idx + 1}: {q['question']}\n\n"
        for key, val in options.items():
            text += f"{key}) {val}\n"

        # –ö–Ω–æ–ø–∫–∏ —Ç–æ–ª—å–∫–æ —Å –±—É–∫–≤–∞–º–∏ (A, B, C, D)
        buttons = [
            InlineKeyboardButton(text=key, callback_data=f"{key}|{idx}")
            for key in options.keys()
        ]
        markup = InlineKeyboardMarkup(inline_keyboard=[buttons])

        await bot.send_message(chat_id, text.strip(), reply_markup=markup)

    except Exception as e:
        logging.exception(f"[ERROR] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–æ–ø—Ä–æ—Å–∞: {e}")


def get_result_message(score: int, total: int) -> str:
    percent = (score / total) * 100

    if percent == 100:
        quotes = [
            "¬´–ü–æ–∑–Ω–∞–π —Å–∞–º–æ–≥–æ —Å–µ–±—è, –∏ —Ç—ã –ø–æ–∑–Ω–∞–µ—à—å –≤—Å–µ–ª–µ–Ω–Ω—É—é –∏ –±–æ–≥–æ–≤.¬ª ‚Äî –°–æ–∫—Ä–∞—Ç",
            "¬´–ß–µ–ª–æ–≤–µ–∫ –µ—Å—Ç—å —Ç–æ, —á—Ç–æ –æ–Ω –¥–µ–ª–∞–µ—Ç –∏–∑ —Å–∞–º–æ–≥–æ —Å–µ–±—è.¬ª ‚Äî –ñ–∞–Ω-–ü–æ–ª—å –°–∞—Ä—Ç—Ä",
        ]
    elif percent >= 80:
        quotes = [
            "¬´–£—á–∏—Ç—å—Å—è ‚Äî —ç—Ç–æ –∑–Ω–∞—á–∏—Ç –æ—Ç–∫—Ä—ã–≤–∞—Ç—å —Ç–æ, —á—Ç–æ —É–∂–µ –∏–∑–≤–µ—Å—Ç–Ω–æ –∫–∞–∂–¥–æ–º—É.¬ª ‚Äî –†–∏—á–∞—Ä–¥ –ë–∞—Ö",
            "¬´–¢–µ—Ä–ø–µ–Ω–∏–µ ‚Äî —ç—Ç–æ –≥–æ—Ä—å–∫–∏–π –∫–æ—Ä–µ–Ω—å, –¥–∞—é—â–∏–π —Å–ª–∞–¥–∫–∏–µ –ø–ª–æ–¥—ã.¬ª ‚Äî –ñ–∞–Ω-–ñ–∞–∫ –†—É—Å—Å–æ",
        ]
    elif percent >= 50:
        quotes = [
            "¬´–û—à–∏–±–∫–∏ ‚Äî –¥–≤–µ—Ä–∏ –∫ –æ—Ç–∫—Ä—ã—Ç–∏—é.¬ª ‚Äî –î–∂–µ–π–º—Å –î–∂–æ–π—Å",
            "¬´–ß–µ–º –±–æ–ª—å—à–µ —è —É–∑–Ω–∞—é, —Ç–µ–º –±–æ–ª—å—à–µ –ø–æ–Ω–∏–º–∞—é, –∫–∞–∫ –º–∞–ª–æ –∑–Ω–∞—é.¬ª ‚Äî –°–æ–∫—Ä–∞—Ç",
        ]
    else:
        quotes = [
            "¬´–ù–µ—É–¥–∞—á–∞ ‚Äî —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –Ω–∞—á–∞—Ç—å —Å–Ω–æ–≤–∞, –Ω–æ —É–∂–µ –±–æ–ª–µ–µ –º—É–¥—Ä–æ.¬ª ‚Äî –ì–µ–Ω—Ä–∏ –§–æ—Ä–¥",
            "¬´–î–∞–∂–µ –ø—É—Ç—å –≤ —Ç—ã—Å—è—á—É –ª–∏ –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –ø–µ—Ä–≤–æ–≥–æ —à–∞–≥–∞.¬ª ‚Äî –õ–∞–æ-—Ü–∑—ã",
        ]

    quote = random.choice(quotes)

    return f"""
‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!
–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {score} –∏–∑ {total} ({int(percent)}%)

üß† {quote}
"""



async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())

